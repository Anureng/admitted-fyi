// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  sessions         Session[]
  Account          Account?
  userPreferences  UserPreference[]
  decisions        Decision[]
  resident         Boolean
  programWatchList Program[]        @relation("ProgramWatchList") // Adjusted for many-to-many
}

model College {
  id        Int        @id @default(autoincrement())
  name      String
  url       String?
  programs  Program[]
  decisions Decision[]

  @@fulltext([name])
}

model Program {
  id         Int        @id @default(autoincrement())
  collegeId  Int
  name       String
  department String?
  degreeType DegreeType
  college    College    @relation(fields: [collegeId], references: [id])
  decisions  Decision[]
  watchers   User[]     @relation("ProgramWatchList")

  @@index([collegeId, degreeType])
  @@fulltext([name])
}

model Decision {
  id             String   @id @default(cuid())
  userId         String
  collegeId      Int
  programId      Int
  status         Status
  date           DateTime @default(now())
  verificationId String   @unique
  statsId        String   @unique
  term           Term
  termYearString String

  college      College      @relation(fields: [collegeId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])
  program      Program      @relation(fields: [programId], references: [id])
  stats        Stats        @relation(fields: [statsId], references: [id])
  verification Verification @relation(fields: [verificationId], references: [id])
}

model Verification {
  id       String    @id @default(cuid())
  verified Boolean
  imgUrl   String
  decision Decision?
}

model UserPreference {
  id              Int    @id @default(autoincrement())
  userId          String
  preferenceType  String
  preferenceValue String
  user            User   @relation(fields: [userId], references: [id])
}

model Stats {
  id         String      @id @default(cuid())
  gpa        Float?
  degreeType DegreeType?
  decision   Decision?
  residency  Residency?
}

enum Status {
  WAITLISTED
  INTERVIEW
  ACCEPTED
  REJECTED
}

enum Residency {
  AMERICAN
  INTERNATIONAL
}

enum Term {
  FALL
  WINTER
  SPRING
  SUMMER
}

enum DegreeType {
  BA // Bachelor of Arts
  BS // Bachelor of Science
  BFA // Bachelor of Fine Arts
  MA // Master of Arts
  MS // Master of Science
  MBA // Master of Business Administration
  MFA // Master of Fine Arts
  PhD // Doctor of Philosophy
  MD // Doctor of Medicine
  JD // Juris Doctor
  EdD // Doctor of Education
  DDS // Doctor of Dental Surgery
  DVM // Doctor of Veterinary Medicine
  LLB // Bachelor of Laws
  LLM // Master of Laws
}
