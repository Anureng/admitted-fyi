// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  title          String?
  sessions       Session[]
  Account        Account[]
  UserPreference UserPreference[]
  Decision       Decision[]
  Verification   Verification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model College {
  id       Int       @id @default(autoincrement())
  name     String
  url      String?
  programs Program[]
}

model Program {
  id           Int            @id @default(autoincrement())
  collegeId    Int
  name         String
  degreeType   DegreeType
  department   String
  college      College        @relation(fields: [collegeId], references: [id])
  decisions    Decision[]
  Verifications Verification[]
}

model Decision {
  id             Int          @id @default(autoincrement())
  userId         String?
  programId      Int
  status         Status
  date           DateTime     @default(now())
  program        Program      @relation(fields: [programId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])
  verification   Verification @relation(fields: [verificationId], references: [id])
  verificationId Int
}

model Verification {
  id        Int        @id @default(autoincrement())
  verified  Boolean
  imgUrl    String
  user      User?      @relation(fields: [userId], references: [id])
  program   Program    @relation(fields: [programId], references: [id])
  userId    String?
  programId Int
  Decision  Decision[]
}

model UserPreference {
  id              Int    @id @default(autoincrement())
  userId          String
  preferenceType  String
  preferenceValue String
  user            User   @relation(fields: [userId], references: [id])
}

enum Status {
  WAITLISTED
  INTERVIEW
  ACCEPTED
  REJECTED
}

enum DegreeType {
  BA // Bachelor of Arts
  BS // Bachelor of Science
  BFA // Bachelor of Fine Arts
  MA // Master of Arts
  MS // Master of Science
  MBA // Master of Business Administration
  MFA // Master of Fine Arts
  PhD // Doctor of Philosophy
  MD // Doctor of Medicine
  JD // Juris Doctor
  EdD // Doctor of Education
  DDS // Doctor of Dental Surgery
  DVM // Doctor of Veterinary Medicine
  LLB // Bachelor of Laws
  LLM // Master of Laws
}
